#!/usr/bin/env python3

import argparse
from collections import UserString

import Foundation
import objc
import UniformTypeIdentifiers
from CoreServices import LaunchServices
from path import Path


class BundlePath(Path):
    bundle_id: str
    bundle: Foundation.NSBundle

    def __init__(self, path: str):
        super().__init__(path)
        bundle = Foundation.NSBundle.bundleWithPath_(self)
        if bundle is None:
            raise ValueError(f"Can't find bundle identifier for the path '{self}")
        self.bundle_id = bundle.bundleIdentifier()
        self.bundle = bundle


class BundleID(UserString):
    bundle_path: Path
    bundle: Foundation.NSBundle

    def __init__(self, identifier: str):
        super().__init__(identifier)
        bundle_urls, _ = LaunchServices.LSCopyApplicationURLsForBundleIdentifier(
            identifier, objc.NULL
        )
        if bundle_urls is None or not len(bundle_urls):
            raise ValueError(f"Can't find bundle with identifier '{identifier}'")
        self.bundle_path = Path(str(bundle_urls[0].path()))
        bundle = Foundation.NSBundle.bundleWithPath_(str(self.bundle_path))
        if not bundle:
            raise ValueError(
                f"Can't find bundle with path '{self.bundle_path}' for identifier '{identifier}'"
            )
        self.bundle = bundle

    def __repr__(self) -> str:
        print(f"bid: super: {super().__str__()}")
        print(f"bid path: {self.bundle_path}")
        print(f"bid bundle: {self.bundle}")
        return f"<BundleID id: '{super().__str__()}', path: '{self.bundle_path}', bundle: {self.bundle}"


def set_file_association(args):
    if args.app_bundle:
        bundle = args.app_bundle.bundle
    else:
        bundle = args.bundle_id.bundle
    bundle_id = bundle.bundleIdentifier()
    bundle_path = Path(bundle.bundlePath())
    if args.verbose:
        print(f"Bundle '{bundle_path}' has identifier '{bundle_id}'")
    for ext in args.extensions:
        uti = UniformTypeIdentifiers.UTType.typeWithFilenameExtension_(ext)
        assert uti is not None
        if args.verbose:
            print(f"Extension '.{ext}' maps to UTI '{uti}'")
        res = LaunchServices.LSSetDefaultRoleHandlerForContentType(
            str(uti), LaunchServices.kLSRolesAll, bundle_id
        )
        if res != 0:
            raise ValueError(
                f"Can't associate extenion '.{ext}' / UTI '{uti}' to bundle ID '{bundle_id}'"
            )


def dump_file_association(args):
    if args.app_bundle:
        print(f"Bundle '{args.app_bundle}' has identifier '{args.app_bundle.bundle_id}'")
    elif args.bundle_id:
        print(f"Bundle ID '{args.bundle_id} has path '{args.bundle_id.bundle_path}'")

    for ext in args.extensions:
        uti = UniformTypeIdentifiers.UTType.typeWithFilenameExtension_(ext)
        assert uti is not None
        print(f"Extension '.{ext}' maps to UTI '{uti}'")
        bundle_handlers = LaunchServices.LSCopyAllRoleHandlersForContentType(
            str(uti), LaunchServices.kLSRolesAll
        )
        default_bundle_handler = LaunchServices.LSCopyDefaultRoleHandlerForContentType(
            str(uti), LaunchServices.kLSRolesAll
        )
        if default_bundle_handler is None:
            print("No default handler bundle ID.")
        if bundle_handlers is None:
            print("No handler bundle IDs")
        else:
            print("Handled by bundle(s):")
            for i, bundle in enumerate(bundle_handlers):
                is_def = " [default]" if bundle == default_bundle_handler else ""
                print(f"\t[{i:2d}]: {bundle}{is_def}")


def real_main(args):
    if args.info:
        dump_file_association(args)
    else:
        set_file_association(args)


def get_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="example:\n  launchservices-set-file-associations -v -e cpp c c++ -e h hpp -a /Applications/Xcode.app",
    )
    parser.add_argument("-v", "--verbose", action="store_true", help="be verbose")
    parser.add_argument(
        "-e",
        "--extensions",
        required=True,
        action="extend",
        nargs="+",
        help="whitespace seperated list of file extensions to associate",
    )
    app_id_group = parser.add_mutually_exclusive_group()
    app_id_group.add_argument(
        "-a",
        "--app-bundle",
        type=BundlePath,
        help="app bundle to associate file extensions with",
    )
    app_id_group.add_argument(
        "-b", "--bundle-id", type=BundleID, help="bundle ID to associate file extension with"
    )
    parser.add_argument("-i", "--info", action="store_true", help="Get file info")
    return parser


def main():
    real_main(get_arg_parser().parse_args())


if __name__ == "__main__":
    main()
