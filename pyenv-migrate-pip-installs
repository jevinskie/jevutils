#!/usr/bin/env python3

import argparse
import logging
import re
import shutil
import subprocess
import sys
from collections.abc import Sequence
from os import PathLike, environ
from tempfile import NamedTemporaryFile
from typing import Any, Final, Protocol, runtime_checkable

from path import Path
from rich import print
from rich.console import Console
from rich.logging import RichHandler

program_name: Final[str] = "pyenv-migrate-pip-installs"


LOG_FORMAT = "%(message)s"
logging.basicConfig(
    level=logging.WARNING,
    format=LOG_FORMAT,
    datefmt="[%X]",
    handlers=[RichHandler(console=Console(stderr=True), rich_tracebacks=True)],
)
logger = logging.getLogger(program_name)

RunArg = str | bytes | PathLike[str] | PathLike[bytes] | Path
RunArgs = RunArg | Sequence[RunArg]
StdRes = str | bytes | None
RunEnv = dict[str, str] | None


class CompletedProcessWithOut(subprocess.CompletedProcess):
    out: str | None

    def __init__(
        self, args: RunArgs, returncode: int, stdout: StdRes = None, stderr: StdRes = None
    ):
        super().__init__(args, returncode, stdout=stdout, stderr=stderr)
        self.out = None
        if isinstance(self.stdout, bytes):
            try:
                self.out = self.stdout.decode()
            except UnicodeDecodeError:
                pass
        else:
            self.out = self.stdout

    def __repr__(self) -> str:
        orig: str = super().__repr__()
        orig = orig.removesuffix(")")
        if self.out is not None:
            return f"{orig}, out={repr(self.out)})"
        else:
            return f"{orig}, out=None)"


def run_cmd(
    *args: RunArg, env: RunEnv = None, log: bool = False, **kwargs: dict[str, Any]
) -> CompletedProcessWithOut:
    args = (*args,)
    if log:
        logger.info(f"Running: {' '.join(map(str, args))}")
    if set(kwargs.keys()).isdisjoint({"stdin", "stdout"}):
        logger.debug("Capturing command ^ output")
        kwargs["capture_output"] = True
    else:
        logger.debug("Not capturing command ^ output")
        kwargs["capture_output"] = False
    if env is not None:
        new_env = environ.copy()
        new_env.update(env)
        env = new_env
    r = subprocess.run(tuple(map(str, args)), env=env, **kwargs)
    if r.returncode:
        if r.stdout is not None:
            if isinstance(r.stdout, str):
                sys.stdout.write(r.stdout)
            else:
                sys.stdout.buffer.write(r.stdout)
        if r.stderr is not None:
            if isinstance(r.stderr, str):
                sys.stderr.write(r.stderr)
            else:
                sys.stderr.buffer.write(r.stderr)
        raise subprocess.CalledProcessError(r.returncode, args, r.stdout, r.stderr)
    return CompletedProcessWithOut(r.args, r.returncode, stdout=r.stdout, stderr=r.stderr)


@runtime_checkable
class CmdResult(Protocol):
    def __call__(
        self, *args: RunArg, env: RunEnv, **kwargs: dict[str, Any]
    ) -> CompletedProcessWithOut:
        ...


def gen_cmd(bin_name: str, log: bool = False) -> CmdResult:
    bin_path = shutil.which(bin_name)
    if bin_path is None:
        raise FileNotFoundError(bin_name)

    def cmd_runner(
        *args: RunArg, env: RunEnv = None, **kwargs: dict[str, Any]
    ) -> CompletedProcessWithOut:
        return run_cmd(bin_path, *args, env=env, log=log, **kwargs)

    return cmd_runner


def get_pyenv_python_bin(pyenv: CmdResult, ver: str) -> Path:
    try:
        r = pyenv("which", "python3", env={"PYENV_VERSION": ver})
    except subprocess.CalledProcessError as e:
        logger.exception(f"Error checking for pyenv Python version '{ver}")
        return e
    return Path(r.out.strip())


def get_python_cmd(python_bin_path: Path, log: bool = False) -> CmdResult:
    cmd = gen_cmd(python_bin_path, log=log)
    try:
        r = cmd("-m", "pip", "--version")
        logger.debug(f"Running {python_bin_path} -m pip --version and got: {r.out.strip()}")
    except subprocess.CalledProcessError as e:
        logger.exception(f"Error checking for Python with pip at path: '{python_bin_path}")
        raise e
    return cmd


def get_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description=program_name)
    parser.add_argument(
        "-p",
        "--python-paths",
        action="store_true",
        help="instead of pyenv versions, treat args as paths to each Python interpreter",
    )
    parser.add_argument("-k", "--keep", action="store_true", help="keep versions")
    parser.add_argument("-U", "--upgrade", action="store_true", help="upgrade versions")
    parser.add_argument("-v", "--verbose", action="store_true", help="be verbose")
    parser.add_argument(
        "from_version", help="pyenv Python version to copy pip installed packages from"
    )
    parser.add_argument("to_version", help="pyenv Python version to copy pip installed packages to")
    return parser


at_pattern = re.compile(r"^\S+ @ ")


def real_main(args: argparse.Namespace) -> int:
    verbose: Final[bool] = args.verbose
    if verbose:
        logger.setLevel(logging.DEBUG)
        logger.info(f"{program_name}: verbose mode enabled")
    if not args.python_paths:
        pyenv = gen_cmd("pyenv")
        print(f"pyenv: {pyenv}", file=sys.stderr)
        from_py_path = get_pyenv_python_bin(pyenv, args.from_version)
        to_py_path = get_pyenv_python_bin(pyenv, args.to_version)
    else:
        from_py_path = Path(args.from_version)
        to_py_path = Path(args.to_version)
    from_py_cmd = get_python_cmd(from_py_path)
    to_py_cmd = get_python_cmd(to_py_path, log=True)
    from_pkgs = from_py_cmd("-m", "pip", "freeze").out
    from_pkgs: list[str] = from_pkgs.strip().splitlines()
    to_pkgs: list[str] = []
    for pkg in from_pkgs:
        if args.keep or pkg.startswith("-e ") or at_pattern.match(pkg):
            to_pkgs.append(pkg)
        else:
            pkg_ver_split = pkg.split("==")
            if len(pkg_ver_split) != 2:
                raise ValueError(f"Expected 'pkgname==pkgver but got: '{pkg}")
            to_pkgs.append(pkg_ver_split[0])
    with NamedTemporaryFile("w", prefix="requirements-", suffix=".txt") as req:
        req.write("\n".join(to_pkgs) + "\n")
        req.flush()
        if args.upgrade:
            to_py_cmd(
                "-m", "pip", "install", "-U", "-r", req.name, stdout=sys.stdout, stderr=sys.stderr
            )
        else:
            to_py_cmd("-m", "pip", "install", "-r", req.name, stdout=sys.stdout, stderr=sys.stderr)
    return 0


def main() -> int:
    try:
        args = get_arg_parser().parse_args()
        return real_main(args)
    except Exception:
        logger.exception(f"Received an unexpected exception when running {program_name}")
        return 1
    except KeyboardInterrupt:
        return 0


if __name__ == "__main__":
    sys.exit(main())
